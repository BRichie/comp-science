####STACKS AND QUEUES 

1. What is the main difference between a stack and a queue?

	ANSWER: The main difference between a stack and a queues is that the stack data structure arranges elements in last in first out(LIFO) priority whereas the queue data structure puts data elements in the first in first out(FIFO) priority. LIFO means that the last entry added will be the first one to leave.  FIFO is more like a standard line, the first object entered will be the first to leave. 

2. What are the similarities between stacks and queues?

	ANSWER: The similarities between stacks and queues are that they are both a collection of objects, they are linear data structures and they both are able to have elements stored and retrieved from them.  


3. Imagine you are an engineer tasked with implementing the UNDO and REDO options in a word processor such as Microsoft Word. Which data structure would you use for each option and why?

	ANSWER: You would want to use the Stack Data Structure(LIFO) for both the UNDO and REDO options because if the user wants to UNDO his/her last action that would be the first entry to be removed and vice versa if the user wished 		to REDO the entry that was just undone he/she would want the last command reversed and added.

####PROGRAMMING QUESTIONS

1. Given a string, reverse it using a stack. For example, the string "Bloc!" should be converted to "!colB".

	####PSEUDOCODE  
			FUNCTION REVERSE(original)
			INIT a new stack
			INIT string to split
			FOR each character in original
				CALL stack.pop WITH character
				APPEND character to reversed
			END FOR
		INIT reversed to empty string
			RETURN reversed
		END FUNCTION

	####CODE
		function reverseString(original){
		var reversedStack = [];
		var splitArray = original.split("");
		for(var i = 0; i = splitArray.length; i++ ){
			reversedStack = reversedStack + splitArray.pop();
			}
			return reversedStack
		}

2. Implement the pop method of a stack using one queue. Make a FIFO data structure mirror the functionality of a LIFO data structure. Since the internal list is not the same as defined in the checkpoint, it may help to rewrite the pseudocode first.
	To delete an item, take all of the elements in the queue one at a time and put them at the end of the queue, except for the last one which should be removed and returned.

	####PSEUDOCODE

	CLASS Stack
		 FUNCTION pop(queue)
		 INIT empty stack
		 INIT empty stack
   		 	FOR each element in the queue
				IF element is equal length minus one push to empty stack
				ELSE
					leave elements in array
				END IF
			END FOR
		END FUNCTION
	END CLASS
					
			

	####CODE
	
	 class Stack {
    		constructor(){
     			this.pop = function(queue){
       			var lastItem = '';
       
       			for(var i = 0; i < queue.length; i++) {
         			if( i == queue.length - 1){
           			lastItem.push(queue[i]);
        			 } 
         		}
       
       				return lastItem;   
       
    	 		}
   		}
	   }
	
			
3. Implement the enqueue and dequeue methods defined in the checkpoint inside your own Queue class.


		ANSWER:
		class Queue {
			constructor(callers){
				this.callers = [];
			}
		
			enqueue (element)
			{
				this.callers.push(element);
			}

			dequeue ()
			{
				let temp = this.callers[0];
				this.callers.splice(0, 1);
				return temp;
			}

		}